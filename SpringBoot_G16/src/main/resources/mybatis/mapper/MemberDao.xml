<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.ezen.g16.dao.IMemberDao">

     <resultMap id="memberMap" type="java.util.HashMap">
     </resultMap>
     <!-- 프로시져를 사용하는 mybatis 에서 MemberVO같은 dto 클래스를 사용하지 않음.
          대신 무엇이든 필드명을 "key"로, 데이터 값을 "value"로 저장할 수 있는 해시맵을 사용함.  -->
     
     <!-- 파라미터가 hashMap인 경우도 그 안에 담긴 키값들을 #{} 안에서 넣어서 value 값을 대입할 수 있음. -->
	 <select id ="getMember" statementType="CALLABLE" parameterType="java.util.HashMap">
	       {
	          CALL getMember(
	          #{userid, <!-- mode=IN IN 변수는 생략가능함.-->},
	          #{ref_cursor, mode=OUT,jdbcType=CURSOR, javaType=ResultSet,resultMap=memberMap}
	          )
	      } 
	 </select>
     <!-- 결과 레코드가 하나인든, 여럿이든 최종 담기는 형태는 ArrayList<HashMap<>> 형태가 될 예정임 -->
     <!-- 레코드 하나가 <HashMap<String,Object>>에 담긴다는 뜻임.  -->
     
      <insert id="joinKakao" statementType="CALLABLE" parameterType="java.util.HashMap">
         {
	          CALL joinKakao(
	          #{userid },  #{name },  #{email },  #{provider }
	          )
	      } 
     </insert>
     
       <insert id="insertMember" statementType="CALLABLE" parameterType="java.util.HashMap">
         {
	          CALL insertMember(
	          #{userid }, #{name },#{pwd },   #{email },  #{phone }
	          )
	      } 
     </insert>
     
      <insert id="updateMember" statementType="CALLABLE" parameterType="java.util.HashMap">
         {
	          CALL updateMember(
	          #{userid }, #{pwd }, #{name },  #{email },  #{phone }
	          )
	      } 
     </insert>
     
     
</mapper>